{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red79\green123\blue61;\red26\green26\blue41;\red172\green172\blue193;
\red70\green137\blue204;\red212\green212\blue212;\red167\green197\blue152;\red194\green126\blue101;\red187\green97\blue44;
\red45\green175\blue118;\red237\green114\blue173;\red115\green123\blue132;\red31\green133\blue64;\red140\green108\blue11;
\red13\green102\blue149;\red14\green86\blue166;}
{\*\expandedcolortbl;;\cssrgb\c37647\c54510\c30588;\cssrgb\c13333\c13725\c21176;\cssrgb\c72941\c73333\c80000;
\cssrgb\c33725\c61176\c83922;\cssrgb\c86275\c86275\c86275;\cssrgb\c70980\c80784\c65882;\cssrgb\c80784\c56863\c47059;\cssrgb\c78824\c45882\c22353;
\cssrgb\c19608\c72941\c53725;\cssrgb\c95294\c54118\c73333;\cssrgb\c52549\c55686\c58824;\cssrgb\c12941\c58039\c31765;\cssrgb\c61961\c49412\c3137;
\cssrgb\c0\c47843\c65098;\cssrgb\c3137\c42353\c70980;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Answer : A complete ERC-721 smart contract where you can have some key function as follow:\
\
Minting the NFT by Paying in Ether.\
Limiting the Supply\
Allow list Functionality\
Modifying the Minting Functionality\
Withdraw Functionality\
Clean up code by using internal Mint()\
\
\
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 //SPDX - License -Identifier: MIT\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 pragma\cf4 \strokec4  \cf5 \strokec5 solidity\cf4 \strokec4  \cf6 \strokec6 ^\cf7 \strokec7 0.8.20\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 import\cf4 \strokec4  \cf8 \strokec8 "@openzeppelin/contracts/token/ERC721/ERC721.sol"\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 import\cf4 \strokec4  \cf8 \strokec8 "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol"\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 import\cf4 \strokec4  \cf8 \strokec8 "@openzeppelin/contracts/access/ownable.sol"\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 import\cf4 \strokec4  \cf8 \strokec8 "@openzeppelin/contracts/utils/cunters.sol"\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 contract\cf4 \strokec4  completeNFT \cf5 \strokec5 is\cf4 \strokec4  ERC721\cf6 \strokec6 ,\cf4 \strokec4 ERC721Enumerable\cf6 \strokec6 ,\cf4 \strokec4  Ownable\cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 using\cf4 \strokec4  contracts \cf9 \strokec9 for\cf4 \strokec4  counter\cf6 \strokec6 .\cf4 \strokec4 counter\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     unit MAX_SUPPLY \cf6 \strokec6 =\cf7 \strokec7 1\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 bool\cf4 \strokec4  \cf10 \strokec10 private\cf4 \strokec4  allowListOpen\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 bool\cf4 \strokec4  \cf10 \strokec10 private\cf4 \strokec4  publicOpen\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 mapping\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4 => \cf5 \strokec5 bool\cf6 \strokec6 )\cf4 \strokec4  \cf10 \strokec10 public\cf4 \strokec4  allowlist\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cb3     counters\cf6 \strokec6 .\cf4 \strokec4 counter private_tokenIdCounter\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf11 \strokec11 constructor\cf6 \strokec6 ()\cf4 \strokec4  ERC721\cf6 \strokec6 (\cf8 \strokec8 "CompleteNFT"\cf6 \strokec6 ,\cf4 \strokec4  \cf8 \strokec8 "CNFT"\cf6 \strokec6 )\{\cf4 \cb1 \strokec4 \
\
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  _baseURI\cf6 \strokec6 ()\cf4 \strokec4  \cf10 \strokec10 internal\cf4 \strokec4  \cf10 \strokec10 pure\cf4 \strokec4  \cf12 \strokec12 override\cf4 \strokec4  \cf13 \strokec13 returns\cf6 \strokec6 (\cf5 \strokec5 string\cf4 \strokec4  \cf14 \strokec14 memory\cf6 \strokec6 )\{\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 return\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  allowListMint\cf6 \strokec6 ()\cf4 \strokec4  \cf10 \strokec10 public\cf4 \strokec4  \cf10 \strokec10 payable\cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         \cf15 \strokec15 require\cf6 \strokec6 (\cf4 \strokec4 allowListOpen\cf6 \strokec6 ,\cf8 \strokec8 "Mint is not Open"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3         \cf15 \strokec15 require\cf6 \strokec6 (\cf4 \strokec4 allowlist\cf6 \strokec6 [\cf15 \strokec15 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ],\cf4 \strokec4  \cf8 \strokec8 "you are not on the allow list"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3         \cf15 \strokec15 require\cf6 \strokec6 (\cf15 \strokec15 msg\cf6 \strokec6 .\cf4 \strokec4 value \cf6 \strokec6 ==\cf7 \strokec7 0.001\cf4 \strokec4  ether\cf6 \strokec6 ,\cf8 \strokec8 "Insufficient funds"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3         InternalMint\cf6 \strokec6 ();\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3       \cf5 \strokec5 function\cf4 \strokec4  internalMint\cf6 \strokec6 ()\cf4 \strokec4  \cf10 \strokec10 internal\cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         \cf15 \strokec15 require\cf6 \strokec6 (\cf4 \strokec4 totalsupply\cf6 \strokec6 ()\cf4 \strokec4  \cf6 \strokec6 <\cf4 \strokec4  MAX_SUPPLY\cf6 \strokec6 ,\cf8 \strokec8 "We sold Out"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3         unit256 tokenId \cf6 \strokec6 =\cf4 \strokec4  _tokenIdCounter\cf6 \strokec6 .\cf4 \strokec4 current\cf6 \strokec6 ();\cf4 \cb1 \strokec4 \
\cb3         _tokenIdCounter\cf6 \strokec6 .\cf4 \strokec4 increment\cf6 \strokec6 ();\cf4 \cb1 \strokec4 \
\cb3         _safeMint\cf6 \strokec6 (\cf15 \strokec15 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ,\cf4 \strokec4 tokenId\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3       \cf5 \strokec5 function\cf4 \strokec4  editMintWindow\cf6 \strokec6 (\cf5 \strokec5 bool\cf4 \strokec4  _allowListOpen\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 bool\cf4 \strokec4  _PublicMintOpen\cf6 \strokec6 ),\cf4 \strokec4  Eternal Onlyowner\cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         publicOpen \cf6 \strokec6 =\cf4 \strokec4  _publicMintOpen\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3         allowListOpen \cf6 \strokec6 =\cf4 \strokec4  _allowListOpen\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3       \cf5 \strokec5 function\cf4 \strokec4  setAllowList\cf6 \strokec6 (\cf5 \strokec5 address\cf6 \strokec6 []\cf14 \strokec14 memory\cf4 \strokec4  \cf5 \strokec5 address\cf6 \strokec6 )\cf4 \strokec4  \cf10 \strokec10 external\cf4 \strokec4  onlyowner\cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         \cf9 \strokec9 for\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 unit i\cf6 \strokec6 =\cf7 \strokec7 0\cf6 \strokec6 ;\cf4 \strokec4  i\cf6 \strokec6 <\cf4 \strokec4  addresses\cf6 \strokec6 .\cf4 \strokec4 length\cf6 \strokec6 ;\cf4 \strokec4  i\cf6 \strokec6 ++)\{\cf4 \cb1 \strokec4 \
\cb3             allowList\cf6 \strokec6 [\cf4 \strokec4 addresses\cf6 \strokec6 [\cf4 \strokec4 i\cf6 \strokec6 ]]=\cf4 \strokec4  \cf5 \strokec5 true\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3       fundtion withdraw\cf6 \strokec6 ()\cf4 \strokec4  \cf10 \strokec10 external\cf4 \strokec4  onlyowner\cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         unit bal \cf6 \strokec6 =\cf4 \strokec4  \cf5 \strokec5 address\cf6 \strokec6 (\cf16 \strokec16 this\cf6 \strokec6 ).\cf4 \strokec4 balance\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 payable\cf6 \strokec6 (\cf15 \strokec15 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ).\cf4 \strokec4 transfer\cf6 \strokec6 (\cf4 \strokec4 bal\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3       \cf5 \strokec5 function\cf4 \strokec4  _beforeTokenTarnsfer\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  from\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  to \cf6 \strokec6 ,\cf4 \strokec4  unit256 tokenId\cf6 \strokec6 ,\cf4 \strokec4  unit256 batchSize\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3       \cf10 \strokec10 internal\cf4 \strokec4  \cf12 \strokec12 override\cf6 \strokec6 (\cf4 \strokec4 ERC721\cf6 \strokec6 ,\cf4 \strokec4  ERC721Enumerable\cf6 \strokec6 )\{\cf4 \cb1 \strokec4 \
\cb3         \cf16 \strokec16 super\cf6 \strokec6 .\cf4 \strokec4 _beforTokenTransfer\cf6 \strokec6 (\cf4 \strokec4 from\cf6 \strokec6 ,\cf4 \strokec4  to\cf6 \strokec6 ,\cf4 \strokec4  tokenId\cf6 \strokec6 ,\cf4 \strokec4 BatchSize\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
}